//
// nekRS User Defined File
//
#include "udf.hpp"
#include "plugins/RANSktau.hpp"

static dfloat R_PIPE;
static dfloat Q_INFLOW;
static dfloat Q_INITIAL;
static dfloat P_OUTLET;
static dfloat C_X0;
static dfloat C_Y0;
static dfloat PI;
static occa::kernel scalarScaledAddKernel;

// RANS
void material_properties(nrs_t* nrs, dfloat time, occa::memory o_U, occa::memory o_S, occa::memory o_UProp, occa::memory o_SProp)
{
	// update the momentum equation properties
	RANSktau::updateProperties();

	// fetch the laminar thermal conductivity
	dfloat k_laminar;
	platform->options.getArgs("SCALAR00 DIFFUSIVITY", k_laminar);

	mesh_t *mesh = nrs->meshV;
	cds_t *cds = nrs->cds;

	// manually update the energy equation diffusivity
	const dfloat Pr_T = 0.9;
	occa::memory o_mu_T = RANSktau::o_mue_t();
	occa::memory o_mu = cds->o_diff + 0 * cds->fieldOffset[0] * sizeof(dfloat);
	scalarScaledAddKernel(mesh->Nlocal, k_laminar, 1.0 / Pr_T, o_mu_T, o_mu);
}

// RANS
void user_q(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  RANSktau::updateSourceTerms();
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
	RANSktau::buildKernel(kernelInfo);
	kernelInfo["defines/rPipe"]		= R_PIPE;
	kernelInfo["defines/qInflow"]	= Q_INFLOW;
	kernelInfo["defines/pOutlet"]	= P_OUTLET;
	kernelInfo["defines/c_x0"]		= C_X0;
	kernelInfo["defines/c_y0"]		= C_Y0;
	kernelInfo["defines/pi"]		= PI;
	scalarScaledAddKernel = oudfBuildKernel(kernelInfo, "scalarScaledAdd");
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
	platform->par->extract("casedata","r_pipe",R_PIPE);
	platform->par->extract("casedata","q_inflow",Q_INFLOW);
	platform->par->extract("casedata","p_outlet",P_OUTLET);
	C_X0 = 0.;
	C_Y0 = 0.;
	PI = 3.14159265359;
}

void UDF_Setup(nrs_t* nrs)

{
// set initial conditions (velocity and pressure):   not currently used
/*
	mesh_t* mesh = nrs->meshV;
	int num_quadrature_points = mesh->Np * mesh->Nelements;

	for (int n = 0; n < num_quadrature_points; n++) {
		float x = mesh->x[n];
		float y = mesh->y[n];
		float z = mesh->z[n];

		nrs->U[n + 0 * nrs->fieldOffset] = 0;
		nrs->U[n + 1 * nrs->fieldOffset] = 0;
		// nrs->U[n + 2 * nrs->fieldOffset] = -1.0e-15;

		nrs->U[n + 2 * nrs->fieldOffset] = -((2*Q_INITIAL)/(PI*R_PIPE*R_PIPE))*(1 - (( ((x-C_X0)*(x-C_X0))+((y-C_Y0)*(y-C_Y0)) )/(R_PIPE*R_PIPE)));	// calculate parabolic inflow profile

		nrs->P[n + 0 * nrs->fieldOffset] = P_OUTLET;
	}
*/
	udf.properties = &material_properties;
	udf.sEqnSource = &user_q;

	const int scalarFieldStart = 1;
	dfloat mu_laminar, rho;
	platform->options.getArgs("VISCOSITY", mu_laminar);
	platform->options.getArgs("DENSITY", rho);
	RANSktau::setup(nrs, mu_laminar, rho, scalarFieldStart);

}
